 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var request = require('request');
var express = require('express');
var app = express();
var mongodb = require('mongodb').MongoClient
var urldb = 'mongodb://glitchme:987654321@ds163612.mlab.com:63612/glitch'; 

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

app.get('/api/imagesearch/:search', function(req, res){
  var offset = req.query.offset
  var strSearch = req.params.search
  var keyId = 'AIzaSyBmhIUHxRqrmCsHRQpi0lfhJaoY9f10YwE'
  var engine = '000259003598894297703:hhqkjk_9of4'
  var api_call = "https://www.googleapis.com/customsearch/v1?key="+keyId+"&cx="+engine+"&q="+escape(strSearch)+"&start="+offset+"&searchType=image&fields=items(link,snippet,image/thumbnailLink,image/contextLink)"
  // res.send(api_call)
  request.get(api_call, function (error, response, body) {
    if (!error && response.statusCode == 200) {
      var items = JSON.parse(body).items
      items.map(function(d){
        d.url = d.link
        d.context = d.image.contextLink
        d.thumbnail = d.image.thumbnailLink
        delete d.link
        delete d.image  
        return d
      })
      mongodb.connect(urldb, function (err, db) {  //Insert query
        if (err) {
          console.log('Unable to connect to the mongoDB server. Error:', err);
          res.send(err)
        } else {
          db.collection('history').insert({
            term: strSearch, 
            when: new Date().toISOString()}, function(err, data){
            if(err) throw err
            console.log(JSON.stringify(data))
          })
          db.close();
        }
      })  
      res.json(items)
    }
  })
})

app.get('/api/latest/imagesearch', function(req, res){
  mongodb.connect(urldb, function (err, db) {  //Insert query
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
      res.send(err)
    } else {
      db.collection('history').find({}, { _id: 0 }).toArray(function(err, data){
        if(err) throw err
        delete data['_id']
        res.send(data)
      })
      db.close();
    }
  })  
})

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

